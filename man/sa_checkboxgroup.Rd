% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checkboxgroup.R
\name{sa_checkboxgroup}
\alias{sa_checkboxgroup}
\alias{update_sa_checkboxgroup}
\title{Checkbox group input}
\usage{
sa_checkboxgroup(
  inputId,
  label,
  choices = NULL,
  selected = NULL,
  color = "#555555",
  ncol = 1,
  inline = FALSE,
  width = NULL,
  choiceNames = NULL,
  choiceValues = NULL
)

update_sa_checkboxgroup(
  session,
  inputId,
  label = NULL,
  choices = NULL,
  selected = NULL,
  inline = FALSE
)
}
\arguments{
\item{inputId}{The id of the input object.}

\item{label}{The label to set for the input object.}

\item{choices}{List of values to show checkboxes for. If elements of the
list are named then that name rather than the value is displayed to the user.
If this argument is provided, then choiceNames and choiceValues must not be
provided, and vice-versa. The values should be strings; other types (such as
logicals and numbers) will be coerced to strings.}

\item{selected}{The values that should be initially selected, if any.}

\item{color}{character, hex or R color name.}

\item{ncol}{number of columns when \code{inline = FALSE}. Will auto-truncate
to the number of choices if exceeded.}

\item{inline}{if \code{TRUE}, \code{ncol} is ignored.}

\item{width}{not in use}

\item{choiceNames, choiceValues}{See \code{shiny::checkboxgroup}.
Vector of names and values, must have same length.}

\item{session}{The session object passed to function given to shinyServer.}
}
\value{
A list of HTML elements that can be added to a UI definition.
}
\description{
A Shiny checkbox group input.
}
\examples{
if (interactive()) {

ui <- function(request) {
fluidPage(
  use_access(),
  fluidRow(bookmarkButton()),
  fluidRow(
    column(3,
      actionButton("btn1", "Reset checkbox group 1"),
      checkboxGroupInput(
        "cb1", "Shiny1 - Variables to show:",
        list("Cylinders" = "cyl", "Transmission" = "am", "Gears" = "gear"),
        width = "1000px"),
      tableOutput("data1")
    ),
    column(3,
      checkboxGroupInput(
        "cb2", "Shiny2 - Variables to show:",
        list("Cylinders" = "cyl", "Transmission" = "am", "Gears" = "gear"),
        inline = TRUE),
      tableOutput("data2")
    ),
    column(3,
      actionButton("btn3", "Reset checkbox group 3"),
      sa_checkboxgroup(
        "cb3", "SA1 - Variables to show:",
        c("Cylinders" = "cyl", "Transmission" = "am", "Gears" = "gear", "A" = "a", "B" = "b"),
        selected = c("cyl", "am"), color = "dodgerblue", ncol = 3),
      tableOutput("data3")
    ),
    column(3,
    actionButton("btn4", "Set to transmission and gear"),
      sa_checkboxgroup(
        "cb4", "SA2 - Variables to show:",
        selected = c("cyl", "am"), color = "firebrick",
        choiceNames = c("Cylinders", "Transmission", "Gears"),
        choiceValues = c("cyl", "am", "gear"), inline = TRUE),
      tableOutput("data4")
    )
  )
)
}

server <- function(input, output, session) {
  output$data1 <- renderTable({
    mtcars[, c("mpg", input$cb1), drop = FALSE]
  }, rownames = TRUE)

  output$data2 <- renderTable({
    mtcars[, c("mpg", input$cb2), drop = FALSE]
  }, rownames = TRUE)
  output$data3 <- renderTable({
    mtcars[, c("mpg", input$cb3), drop = FALSE]
  }, rownames = TRUE)

  output$data4 <- renderTable({
    mtcars[, c("mpg", input$cb4), drop = FALSE]
  }, rownames = TRUE)

  observeEvent(input$btn1, {
    updateCheckboxgroup(session, "cb1", selected = character(0))
  })
  observeEvent(input$btn3, {
    update_sa_checkboxgroup(session, "cb3", selected = character(0))
  })
  observeEvent(input$btn4, {
    update_sa_checkboxgroup(session, "cb4", selected = c("am", "gear"))
  })
}

shinyApp(ui, server, enableBookmarking = "url")

}
}
